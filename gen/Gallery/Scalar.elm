-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Gallery.Scalar exposing (Codecs, DateTime(..), Id(..), JSONString(..), defaultCodecs, defineCodecs, unwrapCodecs, unwrapEncoder)

import Graphql.Codec exposing (Codec)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode
import Json.Decode as Decode exposing (Decoder)
import Json.Encode as Encode


type DateTime
    = DateTime String


type Id
    = Id String


type JSONString
    = JSONString String


defineCodecs :
    { codecDateTime : Codec valueDateTime
    , codecId : Codec valueId
    , codecJSONString : Codec valueJSONString
    }
    -> Codecs valueDateTime valueId valueJSONString
defineCodecs definitions =
    Codecs definitions


unwrapCodecs :
    Codecs valueDateTime valueId valueJSONString
    ->
        { codecDateTime : Codec valueDateTime
        , codecId : Codec valueId
        , codecJSONString : Codec valueJSONString
        }
unwrapCodecs (Codecs unwrappedCodecs) =
    unwrappedCodecs


unwrapEncoder getter (Codecs unwrappedCodecs) =
    (unwrappedCodecs |> getter |> .encoder) >> Graphql.Internal.Encode.fromJson


type Codecs valueDateTime valueId valueJSONString
    = Codecs (RawCodecs valueDateTime valueId valueJSONString)


type alias RawCodecs valueDateTime valueId valueJSONString =
    { codecDateTime : Codec valueDateTime
    , codecId : Codec valueId
    , codecJSONString : Codec valueJSONString
    }


defaultCodecs : RawCodecs DateTime Id JSONString
defaultCodecs =
    { codecDateTime =
        { encoder = \(DateTime raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map DateTime
        }
    , codecId =
        { encoder = \(Id raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Id
        }
    , codecJSONString =
        { encoder = \(JSONString raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map JSONString
        }
    }
