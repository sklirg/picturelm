-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Gallery.Query exposing (..)

import Gallery.InputObject
import Gallery.Interface
import Gallery.Object
import Gallery.Scalar
import Gallery.ScalarCodecs
import Gallery.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias ImageRequiredArguments =
    { id : Gallery.ScalarCodecs.Id }


{-| The ID of the object
-}
image : ImageRequiredArguments -> SelectionSet decodesTo Gallery.Object.ImageNode -> SelectionSet (Maybe decodesTo) RootQuery
image requiredArgs object_ =
    Object.selectionForCompositeField "image" [ Argument.required "id" requiredArgs.id (Gallery.ScalarCodecs.codecs |> Gallery.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias AllImagesOptionalArguments =
    { before : OptionalArgument String
    , after : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , title : OptionalArgument String
    , datetime : OptionalArgument Gallery.ScalarCodecs.DateTime
    }


allImages : (AllImagesOptionalArguments -> AllImagesOptionalArguments) -> SelectionSet decodesTo Gallery.Object.ImageNodeConnection -> SelectionSet (Maybe decodesTo) RootQuery
allImages fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { before = Absent, after = Absent, first = Absent, last = Absent, title = Absent, datetime = Absent }

        optionalArgs =
            [ Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "title" filledInOptionals.title Encode.string, Argument.optional "datetime" filledInOptionals.datetime (Gallery.ScalarCodecs.codecs |> Gallery.Scalar.unwrapEncoder .codecDateTime) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "allImages" optionalArgs object_ (identity >> Decode.nullable)


type alias GalleryRequiredArguments =
    { id : Gallery.ScalarCodecs.Id }


{-| The ID of the object
-}
gallery : GalleryRequiredArguments -> SelectionSet decodesTo Gallery.Object.GalleryNode -> SelectionSet (Maybe decodesTo) RootQuery
gallery requiredArgs object_ =
    Object.selectionForCompositeField "gallery" [ Argument.required "id" requiredArgs.id (Gallery.ScalarCodecs.codecs |> Gallery.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias AllGalleriesOptionalArguments =
    { before : OptionalArgument String
    , after : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , title : OptionalArgument String
    }


allGalleries : (AllGalleriesOptionalArguments -> AllGalleriesOptionalArguments) -> SelectionSet decodesTo Gallery.Object.GalleryNodeConnection -> SelectionSet (Maybe decodesTo) RootQuery
allGalleries fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { before = Absent, after = Absent, first = Absent, last = Absent, title = Absent }

        optionalArgs =
            [ Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "title" filledInOptionals.title Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "allGalleries" optionalArgs object_ (identity >> Decode.nullable)
