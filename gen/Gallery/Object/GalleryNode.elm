-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Gallery.Object.GalleryNode exposing (ImageSetOptionalArguments, description, id, imageSet, public, slug, thumbnailImage, title)

import Gallery.InputObject
import Gallery.Interface
import Gallery.Object
import Gallery.Scalar
import Gallery.ScalarCodecs
import Gallery.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| The ID of the object.
-}
id : SelectionSet Gallery.ScalarCodecs.Id Gallery.Object.GalleryNode
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (Gallery.ScalarCodecs.codecs |> Gallery.Scalar.unwrapCodecs |> .codecId |> .decoder)


{-| -}
title : SelectionSet String Gallery.Object.GalleryNode
title =
    Object.selectionForField "String" "title" [] Decode.string


{-| -}
slug : SelectionSet String Gallery.Object.GalleryNode
slug =
    Object.selectionForField "String" "slug" [] Decode.string


{-| -}
description : SelectionSet (Maybe String) Gallery.Object.GalleryNode
description =
    Object.selectionForField "(Maybe String)" "description" [] (Decode.string |> Decode.nullable)


thumbnailImage : SelectionSet decodesTo Gallery.Object.ImageNode -> SelectionSet decodesTo Gallery.Object.GalleryNode
thumbnailImage object_ =
    Object.selectionForCompositeField "thumbnailImage" [] object_ identity


{-| -}
public : SelectionSet Bool Gallery.Object.GalleryNode
public =
    Object.selectionForField "Bool" "public" [] Decode.bool


type alias ImageSetOptionalArguments =
    { before : OptionalArgument String
    , after : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , title : OptionalArgument String
    , datetime : OptionalArgument Gallery.ScalarCodecs.DateTime
    }


imageSet : (ImageSetOptionalArguments -> ImageSetOptionalArguments) -> SelectionSet decodesTo Gallery.Object.ImageNodeConnection -> SelectionSet (Maybe decodesTo) Gallery.Object.GalleryNode
imageSet fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { before = Absent, after = Absent, first = Absent, last = Absent, title = Absent, datetime = Absent }

        optionalArgs =
            [ Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "title" filledInOptionals.title Encode.string, Argument.optional "datetime" filledInOptionals.datetime (Gallery.ScalarCodecs.codecs |> Gallery.Scalar.unwrapEncoder .codecDateTime) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "imageSet" optionalArgs object_ (identity >> Decode.nullable)
